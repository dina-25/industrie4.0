swagger: '2.0'
info:
  description: >
    This is the Swagger Documentation for the Interaction API. For more
    information please contact either member of Team Interaction.
  version: 1.0.0
  title: Interaction API
tags:
  - name: Agents
    description: Access to active agents
  - name: Orders
    description: Access to placed orders
  - name: Tasks
    description: Access to required tasks
  - name: Users
    description: Access to registered users
paths:
  /agents:
    get:
      tags:
        - Agents
      summary: Retrieve all active Agents
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Agent'
    post:
      tags:
        - Agents
      summary: Create register new agent
      parameters:
        - in: body
          name: body
          description: Configuration for agenr that should be registered
          required: true
          schema:
            $ref: '#/definitions/Agent'
      responses:
        '200':
          description: Successful operation
  '/agents/{id}':
    delete:
      tags:
        - Agents
      summary: Delete agent by id
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - Agents
      summary: Retrieve agent by id
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Agent'
    put:
      tags:
        - Agents
      summary: Update agent by id
      parameters:
        - in: body
          name: body
          description: Updated Values
          required: true
          schema:
            $ref: '#/definitions/Agent'
      responses:
        default:
          description: Successful operation
    parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: Agent id
  /orders:
    get:
      tags:
        - Orders
      summary: Retrieve all orders
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
    post:
      tags:
        - Orders
      summary: Place new order
      parameters:
        - in: body
          name: body
          description: Order that should be placed
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Successful operation
  '/orders/{id}':
    delete:
      tags:
        - Orders
      summary: Delete order by id
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - Orders
      summary: Retrieve order by id
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Order'
    put:
      tags:
        - Orders
      summary: Update order by id
      parameters:
        - in: body
          name: body
          description: Updated Values
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Successful operation
    parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: Order id
  /tasks:
    get:
      tags:
        - Tasks
      summary: Retrieve list of required tasks
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
    post:
      tags:
        - Tasks
      summary: Create new Task
      parameters:
        - in: body
          name: body
          description: Configuration for task that should be created
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: Successful operation
  '/tasks/{id}':
    delete:
      tags:
        - Tasks
      summary: Delete task by id
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - Tasks
      summary: Retrieve task by id
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - Tasks
      summary: Update task by id
      parameters:
        - in: body
          name: body
          description: Updated Values
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        default:
          description: Successful operation
    parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: Task id
  /users:
    get:
      tags:
        - Users
      summary: Retrieve all users
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags:
        - Users
      summary: Create new user
      parameters:
        - in: body
          name: body
          description: Configuration for user that should be created
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successful operation
  '/users/{id}':
    delete:
      tags:
        - Users
      summary: Delete user by id
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - Users
      summary: Retrieve user by id
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
        - Users
      summary: Update user by id
      parameters:
        - in: body
          name: body
          description: Updated Values
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
    parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: User id
definitions:
  Address:
    type: object
    properties:
      country:
        type: string
      city:
        type: string
      street:
        type: string
      houseNr:
        type: integer
  Agent:
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier for that agent
      role:
        type: string
        description: Role Description of agent
        enum:
          - Mover
          - Filler
          - Presser
      state:
        type: string
        description: The state that the agent is currently in
        enum:
          - IDLE
          - BUSY
          - ERROR
  Order:
    type: object
    properties:
      id:
        type: integer
      userId:
        type: integer
      status:
        type: string
        description: Processing state in which the order currently is
        enum:
          - Recieved
          - Processing
          - Delivered
      orderItems:
        type: array
        items:
          $ref: '#/definitions/OrderItem'
  OrderItem:
    type: object
    properties:
      quantity:
        type: integer
      product:
        $ref: '#/definitions/Product'
  PaymentOption:
    type: object
    properties:
      provider:
        type: string
        description: A PaymentOption that the user configured for the account
        enum:
          - PayPal
          - Credit Card
  Product:
    type: object
    properties:
      size:
        type: string
        enum:
          - SMALL
          - MEDIUM
          - LARGE
      topping:
        type: string
        enum:
          - Topping_1
          - Topping_2
          - Topping_3
      packaging:
        type: string
        enum:
          - Packaging_1
          - Packaging_2
          - Packaging_3
      flavour:
        type: string
        enum:
          - Flavour_1
          - Flavour_2
          - Flavour_3
  Task:
    type: object
    properties:
      id:
        type: integer
      status:
        type: string
        enum:
          - Not Ready For Processing
          - Ready For Processing
          - Gets Processed
          - Processed
      successor:
        type: integer
  User:
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier for that user
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      address:
        $ref: '#/definitions/Address'
      paymentOptions:
        type: array
        items:
          $ref: '#/definitions/PaymentOption'
      userType:
        type: string
        description: The role that the user has in our system
        enum:
          - Customer
          - Factory Owner
